void triplanar_OS_vs(
	in float4 iPosition : POSITION,					
	in float3 iNormal : NORMAL,			
	
	uniform float4x4 worldviewproj,	
	
	out float4 oPosition : POSITION,
	out float3 oNormal : TEXCOORD0,
	out float3 oPos : TEXCOORD1
	)
{	
	oPosition = mul(worldviewproj, iPosition);
        oNormal = iNormal;
	oPos = iPosition.xyz / iPosition.w;
}

void triplanar_OS_ps(
	in float3 iNormal : TEXCOORD0,
	in float4 iPos : TEXCOORD1,

        uniform   float4 diff_colour,
        uniform   float4 light_pos,
        uniform   float4 scene_colour,

        uniform   sampler2D grassTexture,
        uniform   sampler2D groundTexture,

	out float4 oColour : COLOR
)
{	
    // Determine the blend weights for the 3 planar projections.
    // N_orig is the vertex-interpolated normal vector.
    float3 blend_weights = abs( iNormal.xyz );   // Tighten up the blending zone:
    blend_weights = (blend_weights - 0.2) * 7;
    blend_weights = max(blend_weights, 0.1);      // Force weights to sum to 1.0 (very important!)
    blend_weights /= (blend_weights.x + blend_weights.y + blend_weights.z ).xxx;
    // Now determine a color value and bump vector for each of the 3
    // projections, blend them, and store blended results in these two
    // vectors:
    float4 blended_color; // .w hold spec value
    float tex_scale = 1.0/4.0;
    {
        // Compute the UV coords for each of the 3 planar projections.
        // tex_scale (default ~ 1.0) determines how big the textures appear.
        float2 coord1 = iPos.yz * tex_scale;
        float2 coord2 = iPos.zx * tex_scale;
        float2 coord3 = iPos.xy * tex_scale;
        // This is where you would apply conditional displacement mapping.
        //if (blend_weights.x > 0) coord1 = . . .
        //if (blend_weights.y > 0) coord2 = . . .
        //if (blend_weights.z > 0) coord3 = . . .
        // Sample color maps for each projection, at those UV coords.
        float4 col1 = tex2D(grassTexture, coord1);
        float4 col2 = tex2D(grassTexture, coord2);
        float4 col3 = tex2D(grassTexture, coord3);
        float4 col4 = tex2D(groundTexture, coord1);
        float4 col5 = tex2D(groundTexture, coord2);
        float4 col6 = tex2D(groundTexture, coord3);

        col1*=(iNormal.y+1.0)/2.0;
        col2*=(iNormal.y+1.0)/2.0;
        col3*=(iNormal.y+1.0)/2.0;

        col4*=(-iNormal.y+1.0)/2.0;
        col5*=(-iNormal.y+1.0)/2.0;
        col6*=(-iNormal.y+1.0)/2.0;

        col1+=col4;
        col2+=col5;
        col3+=col6;
         // Finally, blend the results of the 3 planar projections.
        blended_color = col1.xyzw * blend_weights.xxxx +
                        col2.xyzw * blend_weights.yyyy +
                        col3.xyzw * blend_weights.zzzz;

    }
    float angle = saturate(dot(iNormal, light_pos));
    oColour = blended_color*(diff_colour*angle + scene_colour);
}
