#ifndef BLUB_GLOBALS_HPP
#define BLUB_GLOBALS_HPP

#cmakedefine BLUB_BUILD_DATABASE
#cmakedefine BLUB_BUILD_GRAPHIC
#cmakedefine BLUB_BUILD_GUI
#cmakedefine BLUB_BUILD_INPUT
#cmakedefine BLUB_BUILD_NETWORK
#cmakedefine BLUB_BUILD_PHYSIC
#cmakedefine BLUB_BUILD_PROCEDURAL
#cmakedefine BLUB_BUILD_SERIALIZATION
#cmakedefine BLUB_BUILD_SIGNALS
#cmakedefine BLUB_BUILD_SYNC
#cmakedefine BLUB_BUILD_WEB

#cmakedefine BLUB_USE_ASSIMP
#cmakedefine BLUB_USE_BULLET2
#cmakedefine BLUB_USE_BULLET3
#cmakedefine BLUB_USE_CEF3
#cmakedefine BLUB_USE_OGRE3D
#cmakedefine BLUB_USE_OIS
#cmakedefine BLUB_USE_PHYSX
#cmakedefine BLUB_USE_SOCI
#cmakedefine BLUB_USE_WEBSOCKETPP
#cmakedefine BLUB_USE_OPENSSL

#cmakedefine BLUB_DATABASE_SQLITE3
#cmakedefine BLUB_DATABASE_POSTGRESQL

#ifndef BLUB_USE_OGRE3D
#    define BLUB_NO_OGRE3D
#endif

#if !defined BLUB_USE_BULLET2 && !defined BLUB_USE_BULLET3
#   define BLUB_NO_BULLET
#endif
#if defined BLUB_USE_BULLET3 || defined BLUB_USE_BULLET2
#   define BLUB_USE_BULLET
#endif

#if !defined BLUB_USE_CEF3
#    define BLUB_NO_CEF3
#endif

#include <boost/predef/os/linux.h>
#include <boost/predef/os/windows.h>
#if BOOST_OS_LINUX
#   define BLUB_LINUX
#endif
#if BOOST_OS_WINDOWS
#   define BLUB_WINDOWS
#endif

//#define BLUB_LOG_LOCATION
//#define BLUB_LOG_VOXEL
// #define BLUB_LOG_UDP
// #define BLUB_LOG_TCP
#define BLUB_LOG_PROCEDURAL_VOXEL_EDIT_MESH
#define BLUB_LOG_WEB_OFFSCREEN
//#define BLUB_LOG_NETWORK_WEBSOCKETPP_DEVEL

#ifndef NDEBUG
#   define BLUB_DEBUG
#   if !defined _DEBUG && defined BLUB_USE_PHYSX
#       define _DEBUG 1 // for physx
#   endif
#else
#   define BLUB_RELEASE
#endif
#if defined BLUB_LINUX && defined BLUB_USE_PHYSX
#   define PX_LINUX
#endif


#ifdef BLUB_DEBUG
#   include <assert.h>
#endif
#include <sstream>
#include <string>
#include <cmath>

#include <boost/functional/hash_fwd.hpp>
namespace boost {
    namespace archive {
        class binary_iarchive;
        class binary_oarchive;
        class text_iarchive;
        class text_oarchive;
        class xml_iarchive;
        class xml_oarchive;
    }
    namespace asio {
        namespace ip {
            template <typename InternetProtocol>
            class basic_endpoint;
            class udp;
        }
    }
    namespace serialization {
        class access;
    }
}
class portable_binary_iarchive;
class portable_binary_oarchive;
namespace std
{
    template<class T> class weak_ptr;
}

namespace blub
{
    typedef signed char int8;         /**< 8 bit signed */
    typedef unsigned char uint8;      /**< 8 bit unsigned */
    typedef short int16;              /**< 16 bit signed */
    /**
     * @brief uint16 16 bit unsigned.
     */
    typedef unsigned short uint16;    /**< 16 bit unsigned */
    typedef int int32;                /**< 32 bit signed */
    typedef unsigned int uint32;      /**< 32 bit unsigned */
    typedef long long int64;           /**< 64 bit signed */
    typedef unsigned long long uint64; /**< 64 bit unsigned */
    typedef float real;               /**< floating point */

#ifdef BLUB_DEBUG
#   define BASSERT(x) assert(x)
#else
#   define BASSERT(x)
#endif

    template <class T, std::size_t N>
    class array;
    class byteArray;
    template<typename elementType>
    class deque;
    template <typename classType>
    class enableSharedFromThis;
    template <class Key,
              class Hash = boost::hash<Key>,
              class KeyEqual = std::equal_to<Key>,
              class Allocator = std::allocator<Key> >
    class hashList;
    template <class S,
              class T,
              class H = boost::hash<S>,
              class P = std::equal_to<S>,
              class A = std::allocator<std::pair<const S, T> > >
    class hashMap;
    template <class S,
              class T,
              class H = boost::hash<S>,
              class P = std::equal_to<S>,
              class A = std::allocator<std::pair<const S, T> > >
    class hashMapMulti;
    template <typename idType>
    class idCreator;
    template <typename T>
    class list;
    class ray;
    template <class S, class T>
    class map;
    template<class classType>
    class ownsOwnSharedPointer;
    template <typename first, typename second>
    class pair;
    template <typename T>
    class sharedPointer;
    template <typename T>
    class signal;
    typedef std::istream iStream;
    typedef std::ostream oStream;
    class string;
    class timer;
    template <typename T>
    class vector;
    template <class T>
    using weakPointer = std::weak_ptr<T>;

    namespace ai {
        class aStar;
        namespace astar {
            class nodeListVoxelTerrain;
            class node;
            class edge;
        }
    }

    namespace gui {
        class renderWindow;
    }
    namespace input {
        class joystick;
        class keyboard;
        class mouse;
        class system;
    }
    namespace login
    {
        namespace message {
            class error;
        }
        namespace validation {
            class tcpClient;
        }
        class client;

    }
    namespace octree {
        template<typename S>
        class container;
        template<typename S>
        class search;
    }
    namespace serialization {
        typedef boost::serialization::access access;

        namespace format {
            namespace binary {
                //typedef boost::archive::binary_iarchive input; // watchout! no float/double compatibiltiy
                //typedef boost::archive::binary_oarchive output;
                typedef portable_binary_iarchive input;
                typedef portable_binary_oarchive output;
            }
            namespace text {
                typedef boost::archive::text_iarchive input;
                typedef boost::archive::text_oarchive output;
            }
            namespace xml {
                typedef boost::archive::xml_iarchive input;
                typedef boost::archive::xml_oarchive output;
            }
        }
    }
    namespace sql {
        class database;
    }
    namespace sync {
        template <typename syncType, typename receiverType>
        class sender;
        class identifier;
        namespace voxel {
            namespace accessor {
                namespace multipleTiles {
                    template <class voxelType>
                    class receiver;
                    template <class voxelType, class identifierType = identifier>
                    class sender;
                }
                namespace terrain {
                    template <class voxelType>
                    class receiver;
                    template <class voxelType, class identifierType = identifier>
                    class sender;
                }
            }
            namespace container {
                namespace multipleTiles {
                    template <class voxelType>
                    class receiver;
                    template <class voxelType>
                    class sender;
                }
            }
        }
    }
    namespace web {
        class system;
        class offscreen;
    }
}

#endif // BLUB_GLOBALS_HPP

